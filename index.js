const express = require('express');
const app = express();
const morgan = require('morgan');
const cors = require('cors');
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config();
}

const Person = require('./models/person');

morgan.token('body', (request) => {
  if (request.method === 'POST') {
    return JSON.stringify(request.body);
  }
});

const unknownEndpoint = (request, response) => {
  response.status(404).send({ error: 'unknown endpoint' });
};

const errorHandler = (error, request, response, next) => {
  console.error(error.message);
  if (error.name === 'CastError') {
    return response.status(400).send({ error: 'malformatted id' });
  } else if (error.name === 'ValidationError') {
    return response.status(400).json({ error: error.message });
  }
  next(error);
};

app.use(cors());
app.use(express.json());
app.use(
  morgan(':method :url :status :res[content-length] - :response-time ms :body')
);
app.use(express.static('dist')); //dist folder is the built of the frontend

app.get('/', (request, response) => {
  response.send('<h1>Hello World!</h1>');
});

app.get('/info', (request, response) => {
  Person.countDocuments({}).then((count) => {
    const contents = `Phonebook has info for ${count} people`;
    const currentDate = new Date();
    const dateOptions = {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric',
      timeZoneName: 'short',
    };
    const formattedDate = currentDate.toLocaleDateString(
      undefined,
      dateOptions
    );
    const timeZoneName = currentDate
      .toLocaleTimeString(undefined, {
        timeZoneName: 'long',
      })
      .split(' ')
      .slice(1)
      .join(' ');
    const info = `${contents} <br><br> ${formattedDate} (${timeZoneName})`;
    response.send(info);
  });
});

app.get('/api/persons', (request, response) => {
  Person.find({}).then((persons) => {
    response.json(persons);
  });
});

app.post('/api/persons', (request, response, next) => {
  const body = request.body;
  //Id generated by database
  const person = new Person({
    name: body.name,
    number: body.number,
  });
  person
    .save()
    .then((savedPerson) => {
      response.json(savedPerson);
    })
    .catch((error) => next(error));
});

app.get('/api/persons/:id', (request, response, next) => {
  Person.findById(request.params.id)
    .then((person) => {
      if (person) {
        response.json(person);
      } else {
        response.status(404).end();
      }
    })
    .catch((error) => next(error));
});

app.delete('/api/persons/:id', (request, response, next) => {
  Person.findByIdAndRemove(request.params.id)
    .then(() => {
      response.status(204).end();
    })
    .catch((error) => next(error));
});

//Notice that the findByIdAndUpdate method receives a regular JavaScript object as its parameter,
//and not a new person object created with the Person constructor function.
app.put('/api/persons/:id', (request, response, next) => {
  const body = request.body;
  const person = {
    name: body.name,
    number: body.number,
  };
  //By default, the updatedPerson parameter of the event handler receives the original document without the modifications.
  //We added the optional { new: true }parameter, which will cause our event handler to be called with the new modified document instead of the original.
  const options = {
    new: true,
    runValidators: true,
    context: 'query',
  };
  Person.findByIdAndUpdate(request.params.id, person, options)
    .then((updatedPerson) => {
      if (updatedPerson) {
        response.json(updatedPerson);
      } else {
        response
          .status(404)
          .send({ error: 'Person was already deleted from database' });
      }
    })
    .catch((error) => next(error));
});

//Handler of requests with unknown endpoint
//Order of the middleware is important. Use after all the routes
app.use(unknownEndpoint);

//The error-handling middleware has to be the last loaded middleware!
app.use(errorHandler);

const PORT = process.env.PORT || 3001;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
